@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using ProfessorOfTheYear.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Установить пароль</PageTitle>

<h3>Установите свой пароль</h3>
<StatusMessage Message="@message" />
<p class="text-info">
    У вас нет локального имени пользователя/пароля для этого сайта. Добавьте локальную
    учетную запись, чтобы вы могли войти в систему без внешнего входа.
</p>
<div class="row">
    <div class="col">
        <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-input mb-3">
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" placeholder="Новый пароль" />
            </div>
            <div class="form-input mb-3">
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Подтверждение пароля" />
                
            </div>
            <Button 
                Type="ButtonType.Submit"
                Color="ButtonColor.Primary">
                    Установить пароль
            </Button>
        </EditForm>
     </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            message = $"Ошибка: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Пароль был установлен.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Необходимо ввести новый пароль")]
        [StringLength(100, ErrorMessage = "Длина пароля должна составлять не менее {2} и не более {1} символов.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Новый пароль")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Подтверждение нового пароля")]
        [Compare("NewPassword", ErrorMessage = "Пароль и подтверждение пароля не совпадают.")]
        public string? ConfirmPassword { get; set; }
    }
}
