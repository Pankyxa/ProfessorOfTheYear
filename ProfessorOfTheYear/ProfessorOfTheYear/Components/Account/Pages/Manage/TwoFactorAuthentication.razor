@page "/Account/Manage/TwoFactorAuthentication"

@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Identity
@using ProfessorOfTheYear.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Двуфакторная аутентификация</PageTitle>

<StatusMessage />
<h3>Двуфакторная аутентификация</h3>
@if (canTrack)
{
    if (is2faEnabled)
    {
        if (recoveryCodesLeft == 0)
        {
            <div class="alert alert-danger">
                <strong>У вас не осталось кодов для восстановления.</strong>
                <p>
                    Вы должны <a href="Account/Manage/GenerateRecoveryCodes">сгенерировать новый набор кодов восстановления</a> 
                    прежде чем сможете войти в систему с кодом восстановления.
                </p>
            </div>
        }
        else if (recoveryCodesLeft == 1)
        {
            <div class="alert alert-danger">
                <strong>У вас остался 1 код восстановления.</strong>
                <p>Вы можете <a href="Account/Manage/GenerateRecoveryCodes">сгенерировать новый набор кодов восстановления</a>.</p>
            </div>
        }
        else if (recoveryCodesLeft <= 3)
        {
            <div class="alert alert-warning">
                <strong>У вас осталось @recoveryCodesLeft кода восстановления.</strong>
                <p>Вам следует <a href="Account/Manage/GenerateRecoveryCodes">сгенерировать новый набор кодов восстановления</a>.</p>
            </div>
        }

        if (isMachineRemembered)
        {
            <form style="display: inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                <AntiforgeryToken />
                <Button 
                    Type="ButtonType.Submit"
                    Color="ButtonColor.Primary">
                        Забыть этот браузер
                </Button>
            </form>
        }
        <Button 
            Type="ButtonType.Link"
            Color="ButtonColor.Primary"
            To="Account/Manage/Disable2fa">
                Отключить двуфакторную аутентификацию
        </Button>
        <Button Type="ButtonType.Link"
            Color="ButtonColor.Primary"
            To="Account/Manage/GenerateRecoveryCodes">
                Сбросить коды восстановления
        </Button>
    }

    <h4>Приложение для проверки подлинности</h4>
    @if (!hasAuthenticator)
    {
        <Button 
            Type="ButtonType.Link"
            Color="ButtonColor.Primary"
            To="Account/Manage/EnableAuthenticator">
                Добавить приложение-аутентификатор
        </Button>
    }
    else
    {
        <Button 
            Type="ButtonType.Link"
            Color="ButtonColor.Primary"
            To="Account/Manage/EnableAuthenticator">
                Настроить приложение-аутентификатор
        </Button>
        <Button 
            Type="ButtonType.Link"
            Color="ButtonColor.Primary"
            To="Account/Manage/ResetAuthenticator">
                Сбросить приложение-аутентификатор
        </Button>
    }
}
else
{
    <div class="alert alert-danger">
        <strong>Политика конфиденциальности и использования файлов cookie не были приняты.</strong>
        <p>Вы должны принять эту политику, прежде чем сможете включить двухфакторную аутентификацию.</p>
    </div>
}

@code {
    private bool canTrack;
    private bool hasAuthenticator;
    private int recoveryCodesLeft;
    private bool is2faEnabled;
    private bool isMachineRemembered;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
        hasAuthenticator = await UserManager.GetAuthenticatorKeyAsync(user) is not null;
        is2faEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        isMachineRemembered = await SignInManager.IsTwoFactorClientRememberedAsync(user);
        recoveryCodesLeft = await UserManager.CountRecoveryCodesAsync(user);
    }

    private async Task OnSubmitForgetBrowserAsync()
    {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(
            "Автоматическая аутентификация в этом браузере была отключена. При повторном входе в систему вам будет предложено повторно ввести код двуфакторной аутентификации.",
            HttpContext);
    }
}
