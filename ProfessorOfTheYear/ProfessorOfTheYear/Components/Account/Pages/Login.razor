@page "/Account/Login"

@layout ProfessorOfTheYear.Client.Layout.AuthLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ProfessorOfTheYear.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager


<PageTitle>Вход</PageTitle>

<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="form-layout">
    <p class="form-title">Вход</p>

    <StatusMessage Message="@errorMessage" />
    <DataAnnotationsValidator />

    <div class="form-input">
        <ValidationMessage For="() => Input.Email" class="text-danger" />
        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Электронная почта"/>
    </div>
    <div class="form-input">
        <ValidationMessage For="() => Input.Password" class="text-danger" />
        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Пароль"/>
    </div>
    <div class="checkbox">
        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input"/> Запомнить меня
    </div>
    <div class="form-buttons">
        <Button 
            Type="ButtonType.Submit" 
            Color="ButtonColor.Primary"> 
                Войти 
        </Button>
    </div>
    <div class="form-buttons">
        <Button
            Type="ButtonType.Link" 
            Color="ButtonColor.Primary" 
            Outline="true"
            To="@NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })"> 
                Регистрация
        </Button>
    </div>
    <div class="form-links">
        <p>
            <a href="Account/ForgotPassword">Забыли пароль?</a>
        </p>
        <p>
            <a href="Account/ResendEmailConfirmation">Повторно отправить подтверждение</a>
        </p>
    </div>
</EditForm>

@* <div class="col-md-6 col-md-offset-2">
    <section>
        <h3>Использовать другие сервисы для входа.</h3>
        <hr />
        <ExternalLoginPicker />
    </section>
</div> *@

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("Пользователь вошел в систему.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Аккаунт пользователя заблокирован.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Ошибка: Неудачная попытка входа в систему.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Запомнить меня?")]
        public bool RememberMe { get; set; }
    }
}
