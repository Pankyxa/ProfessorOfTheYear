@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ProfessorOfTheYear.Data

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Сброс пароля</PageTitle>

<EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post" class="form-layout">
    <p class="form-title">Сброс пароя</p>
    <div class="text-center">Введите новый пароль</div>

    <StatusMessage Message="@Message" />
    <DataAnnotationsValidator />

    <input type="hidden" name="Input.Code" value="@Input.Code" />

    <div class="form-input">
        <ValidationMessage For="() => Input.Email" class="text-danger" />
        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Электронная почта" />
    </div>
    <div class="form-input">
        <ValidationMessage For="() => Input.Password" class="text-danger" />
        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Новый пароль" />
    </div>
    <div class="form-input">
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Подтверждение нового пароля" />
    </div>
    <div class="form-buttons">
        <Button 
            Type="ButtonType.Submit"  
            Color="ButtonColor.Primary">
                Сохранить
        </Button>
    </div>
</EditForm>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Ошибка: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Необходимо указать адрес электронной почты")]
        [EmailAddress(ErrorMessage = "Указан некорректный адрес электронной почты")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Необходимо ввести новый пароль")]
        [StringLength(100, ErrorMessage = "Длина пароля должна составлять не менее {2} и не более {1} символов.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Подтверждение пароля")]
        [Compare("Password", ErrorMessage = "Пароль и подтверждение пароля не совпадают.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
