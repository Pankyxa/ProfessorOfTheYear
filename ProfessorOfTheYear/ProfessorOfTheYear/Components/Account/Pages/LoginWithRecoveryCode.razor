@page "/Account/LoginWithRecoveryCode"

@layout ProfessorOfTheYear.Client.Layout.AuthLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using ProfessorOfTheYear.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWithRecoveryCode> Logger

<PageTitle>Проверка кода восстановления</PageTitle>

<EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post" class="form-layout">
    <p class="form-title">Проверка кода восстановления</p>
    <div class="text-center">
        Этот логин не будет сохранен до тех пор, пока вы не введете код приложения для проверки подлинности 
        при входе в систему или не отключите двуфакторную аутентификацию и не войдете снова.
    </div>


    <StatusMessage Message="@message" />
    <DataAnnotationsValidator />

    <div class="form-input">
        <ValidationMessage For="() => Input.RecoveryCode" class="text-danger" />
        <InputText @bind-Value="Input.RecoveryCode" class="form-control" autocomplete="off" placeholder="Код восстановления" />
    </div>
    <div class="form-buttons">
        <Button Type="ButtonType.Submit"
                Color="ButtonColor.Primary">
            Войти
        </Button>
    </div>
</EditForm>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Не удается загрузить двуфакторную аутентификацию пользователя.");
    }

    private async Task OnValidSubmitAsync()
    {
        var recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);

        var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("Пользователь с ID '{UserId}' вошел в систему с помощью кода восстановления.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Аккаунт пользователя заблокирован.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Неверный код восстановления введен для пользователя с ID '{UserId}' ", userId);
            message = "Ошибка: Введен неверный код восстановления.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Код восстановления")]
        public string RecoveryCode { get; set; } = "";
    }
}
