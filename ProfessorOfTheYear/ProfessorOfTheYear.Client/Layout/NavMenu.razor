@implements IDisposable

@inject NavigationManager NavigationManager

<nav class="navbar navbar-expand-md fixed-top">
    <div class="container"> 
        <a class="navbar-brand" href="/">
            <img class="min-logo" src="img/white-min-logo.png">
        </a>
        <button class="navbar-toggler @NavButtonCssClass" type="button" aria-controls="navbarCollapse"
            aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <Icon Name="IconName.List" />
        </button>
        <div class="collapse navbar-collapse @NavBarCssClass justify-content-between" id="navbarCollapse" @onclick="ToggleNavMenu">
            <ul class="navbar-nav nav-underline">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/voting">Голосование</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/about">О конкурсе</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/feedback">Обратная связь</NavLink>
                </li>
            </ul>
            <div class="navbar-nav nav-buttons">
                <AuthorizeView>
                    <Authorized>
                        <div class="nav-item">
                            <Button 
                                Type="ButtonType.Link" 
                                Color="ButtonColor.Light" 
                                Outline="true" 
                                To="Account/Manage" >
                                    <Icon Name="IconName.Person" /> Профиль
                            </Button>
                        </div>
                        <div class="nav-item">
                            <Button 
                                Type="ButtonType.Link" 
                                Color="ButtonColor.Light" 
                                Outline="true" 
                                To="#"
                                Class="btn-icon">
                                    <Icon Name="IconName.Bell" /> @* Кнопка уведомлений, надо изменить ссылку*@
                            </Button>
                        </div>
                        <div class="nav-item">
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken />
                                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                <Button 
                                    Type="ButtonType.Submit" 
                                    Color="ButtonColor.Light" 
                                    Outline="true"
                                    Class="btn-icon">
                                        <Icon Name="IconName.BoxArrowRight" /> @* Кнопка выхода из аккаунта *@
                                </Button>
                            </form>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <div class="nav-item">
                            <Button 
                                Type="ButtonType.Link" 
                                Color="ButtonColor.Light" 
                                Outline="true" 
                                To="Account/Login" >
                                    <Icon Name="IconName.BoxArrowInRight" /> Войти
                            </Button> 
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
</nav>

@code {
    private string? currentUrl;
    private bool collapseNavMenu = true;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

