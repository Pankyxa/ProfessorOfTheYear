@inject ProfessorsDataService pds

<div id="carouselExampleDark" class="carousel carousel-dark slide" data-bs-ride="carousel">
    <div class="carousel-indicators">
        <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
        <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="1" aria-label="Slide 2"></button>
        <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="2" aria-label="Slide 3"></button>
    </div>

    <div class="carousel-inner">
        @for (int i = 0; i < pi!.Count() / 3; i ++)
        {
            @if (i == 0)
            {
                <div class="carousel-item active">
                    <div class="carousel-display">
                        @for (int j = i * 3; j < i * 3 + 3; j++)
                        {
                            <TeacherCard professorInfo="pi![j]" />
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="carousel-item">
                    <div class="carousel-display">
                        @for (int j = i * 3; j < i * 3 + 3; j++)
                        {
                            <TeacherCard professorInfo="pi![j]" />
                        }
                    </div>
                </div>
            }
        }
    </div>

    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>

    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>

@code {
    [Parameter]
    public List<ProfessorInfo>? pi { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        pi = await pds.GetAllProfessors();
    }
}